import 'dart:async';
import 'dart:io';

import 'package:buddy/debug/debug_helper.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:dash_chat/dash_chat.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

class GenericBody extends StatefulWidget {
  final String title;
  final Color titleBackgroundColor;
  final bool onPop;
  final Widget body;
  const GenericBody(
      {this.title, this.titleBackgroundColor, this.onPop, this.body});
  @override
  _GenericBodyState createState() => _GenericBodyState();
}

class _GenericBodyState extends State<GenericBody> {
  final GlobalKey<DashChatState> _chatViewKey = GlobalKey<DashChatState>();

  final ChatUser user = ChatUser(
    name: "Fayeed",
    firstName: "Fayeed",
    lastName: "Pawaskar",
    uid: "12345678",
    avatar: "https://www.wrappixel.com/ampleadmin/assets/images/users/4.jpg",
  );

  final ChatUser otherUser = ChatUser(
    name: "Mrfatty",
    uid: "25649654",
  );

  List<ChatMessage> messages = List<ChatMessage>();
  var m = List<ChatMessage>();

  var i = 0;

  void systemMessage() {
    Timer(Duration(milliseconds: 300), () {
      if (i < 6) {
        setState(() {
          messages = [...messages, m[i]];
        });
        i++;
      }
      Timer(Duration(milliseconds: 300), () {
        _chatViewKey.currentState.scrollController
          ..animateTo(
            _chatViewKey.currentState.scrollController.position.maxScrollExtent,
            curve: Curves.easeOut,
            duration: const Duration(milliseconds: 300),
          );
      });
    });
  }

  void onSend(ChatMessage message) async {
    print(message.toJson());
    var documentReference = Firestore.instance
        .collection('messages')
        .document(DateTime.now().millisecondsSinceEpoch.toString());

    await Firestore.instance.runTransaction((transaction) async {
      await transaction.set(
        documentReference,
        message.toJson(),
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: <Widget>[
        Container(
          height: MediaQuery.of(context).size.height,
          width: MediaQuery.of(context).size.width,
          color: widget.titleBackgroundColor == null
              ? Color(0XFF504DE5)
              : widget.titleBackgroundColor,
        ),
        Align(
          alignment: Alignment.bottomCenter,
          child: Container(
            height: MediaQuery.of(context).size.height / 1.3,
            decoration: BoxDecoration(
                borderRadius: BorderRadius.all(Radius.circular(50.h)),
                gradient: LinearGradient(
                    colors: [Color(0xFFF6F7FB), Color(0xfff6f7fb)])),
          ),
        ),
        Align(
          alignment: Alignment.bottomCenter,
          child: Container(
            height: MediaQuery.of(context).size.height / 1.3,
            child: StreamBuilder(
                stream: Firestore.instance.collection('messages').snapshots(),
                builder: (context, snapshot) {
                  if (!snapshot.hasData) {
                    return Center(
                      child: CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(
                          Theme.of(context).primaryColor,
                        ),
                      ),
                    );
                  } else {
                    List<DocumentSnapshot> items = snapshot.data.documents;
                    var messages =
                        items.map((i) => ChatMessage.fromJson(i.data)).toList();
                    print(messages.last.text);
                    return DashChat(
                      key: _chatViewKey,
                      inverted: false,
                      onSend: onSend,
                      sendOnEnter: true,
                      textInputAction: TextInputAction.send,
                      user: user,
                      inputDecoration: InputDecoration.collapsed(
                          hintText: "Add message here..."),
                      dateFormat: DateFormat('yyyy-MMM-dd'),
                      timeFormat: DateFormat('HH:mm'),
                      messages: messages,
                      showUserAvatar: false,
                      showAvatarForEveryMessage: false,
                      scrollToBottom: true,
                      onPressAvatar: (ChatUser user) {
                        print("OnPressAvatar: ${user.name}");
                      },
                      onLongPressAvatar: (ChatUser user) {
                        print("OnLongPressAvatar: ${user.name}");
                      },
                      inputMaxLines: 5,
                      messageContainerPadding:
                          EdgeInsets.only(left: 5.0, right: 5.0),
                      alwaysShowSend: true,
                      inputTextStyle: TextStyle(fontSize: 16.0),
                      inputContainerStyle: BoxDecoration(
                        border: Border.all(width: 0.0),
                        color: Colors.white,
                      ),
                      onQuickReply: (Reply reply) {
                        setState(() {
                          messages.add(ChatMessage(
                              text: reply.value,
                              createdAt: DateTime.now(),
                              user: user));

                          messages = [...messages];
                        });

                        Timer(Duration(milliseconds: 300), () {
                          _chatViewKey.currentState.scrollController
                            ..animateTo(
                              _chatViewKey.currentState.scrollController
                                  .position.maxScrollExtent,
                              curve: Curves.easeOut,
                              duration: const Duration(milliseconds: 300),
                            );

                          if (i == 0) {
                            systemMessage();
                            Timer(Duration(milliseconds: 600), () {
                              systemMessage();
                            });
                          } else {
                            systemMessage();
                          }
                        });
                      },
                      onLoadEarlier: () {
                        print("laoding...");
                      },
                      shouldShowLoadEarlier: false,
                      showTraillingBeforeSend: true,
                      trailing: <Widget>[
                        IconButton(
                          icon: Icon(Icons.photo),
                          onPressed: () async {
                            /*
                            File result = await ImagePicker.pickImage(
                              source: ImageSource.gallery,
                              imageQuality: 80,
                              maxHeight: 400,
                              maxWidth: 400,
                            );

                            if (result != null) {
                              final StorageReference storageRef =
                                  FirebaseStorage.instance
                                      .ref()
                                      .child("chat_images");

                              StorageUploadTask uploadTask = storageRef.putFile(
                                result,
                                StorageMetadata(
                                  contentType: 'image/jpg',
                                ),
                              );
                              StorageTaskSnapshot download =
                                  await uploadTask.onComplete;

                              String url = await download.ref.getDownloadURL();

                              ChatMessage message =
                                  ChatMessage(text: "", user: user, image: url);

                              var documentReference = Firestore.instance
                                  .collection('messages')
                                  .document(DateTime.now()
                                      .millisecondsSinceEpoch
                                      .toString());

                              Firestore.instance
                                  .runTransaction((transaction) async {
                                await transaction.set(
                                  documentReference,
                                  message.toJson(),
                                );
                              });
                            }
                            */
                          },
                        )
                      ],
                    );
                  }
                }),
          ),
        ),

        //increase clickable area
        Positioned(
            top: 40.h,
            left: 0,
            child: Align(
              alignment: Alignment.bottomCenter,
              child: GestureDetector(
                child: Padding(
                    padding: EdgeInsets.fromLTRB(10.h, 40.h, 10.h, 40.h),
                    child: IconButton(
                      icon: Icon(
                        Icons.arrow_back_ios,
                        color: Colors.white,
                        size: 55.w,
                      ),
                      onPressed: () => Navigator.pop(context),
                    )),
              ),
            )),
        Positioned(
            top: 75.h,
            left: MediaQuery.of(context).size.width / 3.7,
            child: Align(
              alignment: Alignment.centerLeft,
              child: Padding(
                  padding: EdgeInsets.fromLTRB(80.h, 40.h, 10.h, 40.h),
                  child: Display(
                    color: Colors.white,
                    display: 1,
                    text: widget.title,
                  )),
            )),
      ],
    );
  }
}

class Display extends StatelessWidget {
  final String text;
  final int display;
  final Color color;
  final bool isBold;
  final double incrementSize;

  const Display(
      {this.text,
      this.display,
      this.color,
      this.isBold,
      this.incrementSize = 0});
  @override
  Widget build(BuildContext context) {
    switch (display) {
      case 1:
        return Text(text,
            style: TextStyle(
                fontSize: 60.w,
                fontWeight: FontWeight.bold,
                color: color == null ? Colors.black : color));

        break;

      case 2:
        return Text(text,
            style: TextStyle(
              fontSize: 55.w + incrementSize,
              fontWeight: isBold == null ? FontWeight.w500 : FontWeight.bold,
              color: color == null ? Colors.black : color,
            ));
        break;

      case 3:
        return Text(text,
            style: TextStyle(
                fontSize: 40.w + incrementSize,
                fontWeight: isBold == null ? FontWeight.w500 : FontWeight.bold,
                color: color == null ? Colors.black : color));
        break;

      case 4:
        return Text(text,
            style: TextStyle(
                fontSize: 30.w + incrementSize,
                fontWeight: isBold == null ? FontWeight.w500 : FontWeight.bold,
                letterSpacing: 2.w,
                color: color == null ? Colors.black : color));
        break;

      default:
        return Text(text);
    }
  }
}
