import 'package:buddy/global/config/config.dart';
import 'package:buddy/layout/chat/controller/chat_controller.dart';
import 'package:buddy/layout/chat/models/chat_model.dart';
import 'package:buddy/layout/chat/widget/chat_message.dart';
import 'package:buddy/layout/chat/widget/chat_textfield.dart';
import 'package:buddy/layout/chat/widget/person.dart';
import 'package:buddy/layout/chat/widget/generic_body.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_database/ui/firebase_animated_list.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

class ChatView extends StatefulWidget {
  static const String routeName = "/chat_view";

  final int channel;
  final String fromView;

  const ChatView({@required this.fromView, @required this.channel});

  @override
  _ChatViewState createState() => _ChatViewState();
}

class _ChatViewState extends State<ChatView> {
  TextEditingController _editingController = TextEditingController();
  ChatController _chatController = new ChatController();
  ScrollController _scrollController = new ScrollController();

  FocusNode _focusNode = FocusNode();
  bool _iskeyboardShowing;
  @override
  void initState() {
    _asyncInitState();
    super.initState();
  }

  _asyncInitState() async {
    await _chatController.initState(context, widget.fromView, widget.channel);
  }

  @override
  Widget build(BuildContext context) {
    ScreenUtil().init(context);
    _iskeyboardShowing =
        MediaQuery.of(context).viewInsets.bottom > 0 ? true : false;

    return Scaffold(
        resizeToAvoidBottomInset: true,
        body: GenericBody(
          implyLeading: false,
          chatPeople: _chatPeople(),
          isKeyboardShowing: _iskeyboardShowing,
          body: FirebaseAnimatedList(
            query: _chatController.getReference(widget.fromView).parent(),
            itemBuilder: (BuildContext context, DataSnapshot snapshot,
                Animation<double> animation, int i) {
              print("hii");

              Map<dynamic, dynamic> map = snapshot.value;
              if (map != null) {
                List<ChatModel> list = new List();

                map.forEach((key, value) async {
                  //  print(value);
                  list.add(ChatModel.fromJson(value));
                });
                list.sort((a, b) => a.timestamp.compareTo(b.timestamp));

                return Container(
                  height: MediaQuery.of(context).size.height,
                  padding: EdgeInsets.all(40.h),
                  child: GestureDetector(
                    onDoubleTap: () {
                      print("heere");
                      FocusScope.of(context).unfocus();
                    },
                    child: Column(
                      children: <Widget>[
                        Expanded(
                          child: ListView.builder(
                              shrinkWrap: true,
                              itemCount: list.length,
                              itemBuilder: (context, i) {
                                return Column(
                                  children: <Widget>[
                                    ChatMessage(
                                      isOwn:Global.email == list[i].email,
                                      people: Person(),
                                      text:
                                          "Whether it is Snapchat, Twitter, Facebook, tual characters matters. ",
                                    ),
                                    SizedBox(height: 40.h),
                                  ],
                                );
                              }),
                        ),
                        ChatTextField(
                          editingController: _editingController,
                          focusNode: _focusNode,
                          onTap: () {
                            setState(() {});
                            //TODO Store KeyboardSize in firestore for exact

                            if (!_iskeyboardShowing &&
                                _scrollController.hasClients) {
                              _scrollController.animateTo(
                                _scrollController.position.maxScrollExtent +
                                    MediaQuery.of(context).size.height / 3,
                                curve: Curves.easeOut,
                                duration: const Duration(milliseconds: 200),
                              );
                            }
                          },
                          onSubmitted: (String value) {
                            _chatController.sendMessage(value, widget.fromView);
                          },
                        ),
                      ],
                    ),
                  ),
                );
              } else {
                print("you are null");
                return ChatTextField(
                  editingController: _editingController,
                  focusNode: _focusNode,
                  onTap: () {
                    setState(() {});
                    //TODO Store KeyboardSize in firestore for exact

                    if (!_iskeyboardShowing && _scrollController.hasClients) {
                      _scrollController.animateTo(
                        _scrollController.position.maxScrollExtent +
                            MediaQuery.of(context).size.height / 3,
                        curve: Curves.easeOut,
                        duration: const Duration(milliseconds: 200),
                      );
                    }
                  },
                  onSubmitted: (String value) {
                    _chatController.sendMessage(value, widget.fromView);
                  },
                );
              }
            },
          ),
        ));
  }

  Widget _chatPeople() => Align(
      alignment: Alignment.topRight,
      child: Container(
          width: MediaQuery.of(context).size.width / 2,
          height: MediaQuery.of(context).size.height / 6,
          child: ListView(
              shrinkWrap: true,
              reverse: true,
              scrollDirection: Axis.horizontal,
              physics: NeverScrollableScrollPhysics(),
              children: <Widget>[Person()])));
}

/*
 ChatMessage(
                            isOwn: false,
                            people: Person(),
                            text:
                                "Whether it is Snapchat, Twitter, Facebook, tual characters matters. ",
                          ),
                          SizedBox(height: 40.h),
                          ChatMessage(
                            isOwn: true,
                            people: Person(),
                            text:
                                "Yes i am glad to to see you too, how have you beeddsdsdsddsdsn? I have been good and i dsdsdds ve been a bit like busy but yu knwo i gt !",
                          ),
                          SizedBox(height: 40.h),
                          ChatMessage(
                            isOwn: true,
                            people: Person(),
                            text:
                                "Yes i am glad to to see you too, how have you beeddsdsdsddsdsn? I have been good and i dsdsdds ve been a bit like busy but yu knwo i gt !",
                          ),
                          SizedBox(height: 40.h),
                          ChatMessage(
                            isOwn: false,
                            people: Person(),
                            text:
                                "Wether it is Snapchat, Twitter, Facebook, tual characters matters. ",
                          ),
                          SizedBox(height: 40.h),
                          ChatMessage(
                            isOwn: false,
                            people: Person(),
                            text:
                                "Wether it is Snapchat, Twitter, Facebook, tual characters matters. ",
                          ),
                          SizedBox(height: 40.h),
                          ChatMessage(
                            isOwn: false,
                            people: Person(),
                            text:
                                "Wether it is Snapchat, Twitter, Facebook, tual characters matters. ",
                          ),
                          SizedBox(height: 40.h),
                          ChatMessage(
                            isOwn: true,
                            people: Person(),
                            text:
                                "Yes i am glad to to see you too, how have you beeddsdsdsddsdsn? I have been good and i dsdsdds ve been a bit like busy but yu knwo i gt !",
                          ),
                          SizedBox(height: 40.h),
                          ChatMessage(
                            isOwn: true,
                            people: Person(),
                            text:
                                "Yes i am glad to to see you too, how have you beeddsdsdsddsdsn? I have been good and i dsdsdds ve been a bit like busy but yu knwo i gt !",
                          ),
                          SizedBox(height: 40.h),
                          ChatMessage(
                            isOwn: true,
                            people: Person(),
                            text:
                                "Yes i am glad to to see you too, how have you beeddsdsdsddsdsn? I have been good and i dsdsdds ve been a bit like busy but yu knwo i gt !",
                          ),
                          SizedBox(height: 40.h),
                          ChatMessage(
                            isOwn: false,
                            people: Person(),
                            text:
                                " Wether it is Snapchat, Twitter, Facebook, tual characters matters. ",
                          ),
                          SizedBox(height: 40.h),
                          ChatMessage(
                            isOwn: false,
                            people: Person(),
                            text:
                                " Wether it is Snapchat, Twitter, Facebook, tual characters matters. ",
                          ),
                          SizedBox(height: 40.h),
                          ChatMessage(
                            isOwn: false,
                            people: Person(),
                            text:
                                "last: Wether it is Snapchat, Twitter, Facebook, tual characters matters. ",
                          ),
                          SizedBox(height: 40.h),
*/








------



import 'dart:async';
import 'dart:math';

import 'package:buddy/debug/debug_helper.dart';
import 'package:buddy/global/config/config.dart';
import 'package:buddy/global/helper/date_helper.dart';
import 'package:buddy/layout/chat/args/chat_args.dart';
import 'package:buddy/layout/chat/screens/chat_view.dart';
import 'package:buddy/layout/home/model/awaiting_model.dart';
import 'package:buddy/layout/home/model/confirmed_model.dart';
import 'package:buddy/layout/home/view/searching_view.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';

class SearchController {
  static final SearchController _instance = SearchController.internal();
  SearchController.internal();

  factory SearchController() {
    return _instance;
  }
  //Childs in our database
  DatabaseReference _searchRef;
  DatabaseReference _searchAwaitingRef;
  DatabaseReference _searchConfirmedRef;

  //initialize Refs
  Future<void> initSearchRefs() async {
    _searchRef =
        FirebaseDatabase.instance.reference().child("Home").child("Search");
    // DateHelper.currentDayInString();
    _searchConfirmedRef = _searchRef.child("Confirmed").child("2020-08-14");
    _searchAwaitingRef = _searchRef.child("Awaiting").child("2020-08-14");
    await _checkRefStatus();
  }

  //Initialize Methods, and listeners
  Future<void> initState(BuildContext context) async {
    await initSearchRefs();
    bool secondUser = false;

    _searchAwaitingRef.onValue.listen((event) async {
      //  await checkIfInConfirmed(context);
      //  print("Should stop here");
      Map<dynamic, dynamic> map = event.snapshot.value;
      if (map != null) {
        map.forEach((key, value) async {
          AwaitingModel awaitingModel = AwaitingModel.fromJson(key, value);

          if (awaitingModel.hasMatched == false &&
              awaitingModel.user !=Global.email) {
            //This way we can prevent duplicate

            awaitingModel.hasMatched = true;

            await addUserToAwaiting(awaitingModel);

            ///first user is true
            //Finds un matched user & set to true to lock matching process
            //if there is no key, then it just ignores
            // await deleteUsersFromAwaiting(awaitingModel);

            await getByKey(_searchAwaitingRef, "user",Global.email)
                .then((DataSnapshot snapshot) async {
              Map<dynamic, dynamic> map = snapshot.value;
              if (map != null) {
                map.forEach((key, value) async {
                  AwaitingModel awaitingModel =
                      AwaitingModel.fromJson(key, value);
                  if (awaitingModel.hasMatched == true) {
                    print("found where hasMatched is true");
                  }
                });
              }

              /*
              ConfirmedModel confirmedModel = ConfirmedModel(
                  timer: awaitingModel.timer,
                  endTimeStamp:
                      DateHelper.getEndTimeInTimestamp(awaitingModel.timer),
                  users: [awaitingModel.user,Global.email],
                  channelName: Random().nextInt(100000));

              await _addUsersToConfirmed(confirmedModel);

              print("ARE YOU COMING HERE??????????????" +Global.email);

              print("ARE YOU COMING HERE??????????????" +
                  confirmedModel.channelName.toString());
                  */
              /*
              Navigator.of(context).pushReplacementNamed(ChatView.routeName,
                  arguments: ChatArgs(
                      channel: confirmedModel.channelName,
                      fromView: SearchingView.routeName,
                      timerInMs: confirmedModel.endTimeStamp,
                      users: [awaitingModel.user,Global.email]));

                      */
            });
          }
        });
      } else {
        await addUserToAwaiting(
          AwaitingModel(hasMatched: false, timer: 3, user:Global.email),
        );
        print("i am the first user ");
      }
    }, onError: (Object o) {
      //do something
    });
  }

  //functions
  DatabaseReference getReference() => _searchRef;

  Future<void> _checkRefStatus() async {
    await _searchRef
        .limitToFirst(1)
        .once()
        .then((value) => DebugHelper.green("FB: Home/Search"));

    await _searchAwaitingRef
        .limitToFirst(1)
        .once()
        .then((value) => DebugHelper.green("FB: Home/Search/Awaiting/Date"));

    await _searchConfirmedRef
        .limitToFirst(1)
        .once()
        .then((value) => DebugHelper.green("FB: Home/Search/Confirmed/Date"));
  }

  Future<DataSnapshot> getByKey(
          DatabaseReference reference, String key, String value) =>
      reference.orderByChild(key).equalTo(value).once();

  Future<void> checkIfInConfirmed(BuildContext context) async {
    await _searchConfirmedRef.once().then((DataSnapshot snapshot) {
      Map<dynamic, dynamic> map = snapshot.value;
      if (map != null) {
        map.forEach((key, value) async {
          ConfirmedModel confirmedModel = ConfirmedModel.fromJson(key, value);
          if (confirmedModel.users.contains(Global.email)) {
            if (DateHelper.getRemainingTimeFromNowTS(
                    confirmedModel.endTimeStamp) <
                0) {
              //delete
            }

            DebugHelper.red(
                "(CHECK IF IN CONFIRMED) ARE YOU COMING HERE??????????????" +
                   Global.email);

            DebugHelper.red(
                "(CHECK IF IN CONFIRMED) ARE YOU COMING HERE??????????????" +
                    confirmedModel.channelName.toString());
            /*
            Navigator.of(context).pushReplacementNamed(ChatView.routeName,
                arguments: ChatArgs(
                    channel: confirmedModel.channelName,
                    fromView: SearchingView.routeName,
                    timerInMs: confirmedModel.endTimeStamp,
                    users: confirmedModel.users));

                    */
          }
        });
      }
    });
  }

  Future<void> addUserToAwaiting(AwaitingModel awaitingModel) async {
    await _searchAwaitingRef.once().then((DataSnapshot snapshot) {
      String value = snapshot.value.toString();

      if (!(value.contains(Global.email))) {
        _searchAwaitingRef.push().set(awaitingModel.toJson());
      }
    });
  }

  Future<void> deleteUsersFromAwaiting(AwaitingModel awaitingModel) async {
    await _searchAwaitingRef.child(awaitingModel.key).remove();
    //  getByKey(_searchAwaitingRef, "user",Global.email).then((value) => null)

    /*
    for (int i = 0; i < users.length; i++) {
      getByKey(_searchAwaitingRef, "user", users[i])
          .then((DataSnapshot snapshot) async {
        Map<dynamic, dynamic> map = snapshot.value;
        if (map != null) {
          map.forEach((key, value) {
            AwaitingModel awaitingModel = AwaitingModel.fromJson(key, value);
            _searchAwaitingRef.child(awaitingModel.key).remove();
          });
        }
      });
      
    }
    */

    // await _searchAwaitingRef.child(awaitingModel.key).remove();
  }

  Future<void> _addUsersToConfirmed(ConfirmedModel confirmedModel) async {
    await _searchConfirmedRef.once().then((DataSnapshot snapshot) {
      String value = snapshot.value.toString();
      if (!(value.contains(Global.email))) {
        print(Global.email + "  doesn't exist in confirm");
        _searchConfirmedRef.push().set(confirmedModel.toJson());
      } else {
        //This user did not finish session
      }
    });
  }
}
